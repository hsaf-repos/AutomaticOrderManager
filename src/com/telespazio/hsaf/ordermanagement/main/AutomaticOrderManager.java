package com.telespazio.hsaf.ordermanagement.main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.io.File;
import com.telespazio.hsaf.ordermanagement.orderlist.xsd.autogeneratedClasses.AdditionalInfo;
import com.telespazio.hsaf.ordermanagement.orderlist.xsd.autogeneratedClasses.Order;
import com.telespazio.hsaf.ordermanagement.orderlist.xsd.autogeneratedClasses.Orderlist;
import com.telespazio.hsaf.ordermanagement.orderlist.xsd.autogeneratedClasses.PFDUnit;
import com.telespazio.hsaf.ordermanagement.orderlist.xsd.autogeneratedClasses.UMARFMetadataField;
import com.telespazio.hsaf.ordermanagement.orderlist.xsd.autogeneratedClasses.User;

import java.util.logging.FileHandler;
import java.util.logging.Logger;

import org.apache.commons.io.FileUtils;

/**
 * This class process the H SAF orders comming from the HSAF web site or from
 * UMARF
 * 
 * @author Telespazio Date: Sept. 2019
 */
public class AutomaticOrderManager {

	private static String ordersFilePath = "/opt/hsaf/orders/hsaforders.xml";
	private static String webOrdersFilePath = "/opt/hsaf/orders/hsafWebOrders.xml";
	private static String ordersLog = "/opt/hsaf/orders/hsafOrders.log";
	private static String orderManagerMainScript = "orderManager_Main.sh";

	private static String ordersDirectory = "/ext_storage/HSAF_FTP_ORDERS";

	private static final String ORDERS_DIR_PATH = "/UMARF/safclient/autoUMARF/orders";
	private static final double ORDERS_FOLDER_FULL_THR_BYTES = 300000000000.0;
	static FileHandler handler;
	static Logger logger;

	static EmailServer emailServer;

	public static void main(String[] args) throws IOException {

		/* Initialise logger */
		try {
			handler = new FileHandler(ordersLog, true);
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		logger = Logger.getLogger("com.telespazio.hsaf.ordermanagement.main");
		logger.addHandler(handler);

		// Initialize email server

		emailServer = new EmailServer();

		// If the order manager is still running skip the orders processing
		Runtime rt = Runtime.getRuntime();
		try {

			String[] cmd = { "/bin/sh", "-c", "ps -ef | grep orderManager_Main.sh | grep -v grep" };
			Process proc2 = rt.exec(cmd);

			BufferedReader processOutput = new BufferedReader(new InputStreamReader(proc2.getInputStream()));

			// read configuration file header

			if (processOutput.readLine() != null) {

				String msg = orderManagerMainScript
						+ " is still running. ORDERS PROCESSING STOPPED (wait for the next scheduled run)";
				logger.info(msg);

				emailServer.sendmailHsaf(msg, "gabriele.gottardo@telespazio.com");

				logger.info(new Date() + " Orders processing ends");
				return;
			}

		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// IF the orders folder dimension is greater than the threshold, skip the
		// processing
		File ordersFolder = new File(ordersDirectory);

		if (ordersFolder.isDirectory()) {
			double dirSize = FileUtils.sizeOfDirectory(ordersFolder);

			if (dirSize > ORDERS_FOLDER_FULL_THR_BYTES) {

				String msg = "The orders directory size is too big ( " + dirSize
						+ " ). Orders cannot be processed. Wait for the next run.";
				logger.info(msg);
				emailServer.sendmailHsaf(msg, "gabriele.gottardo@telespazio.com");

				return;
			}
		}

		logger.info(new Date() + " Orders processing starts");

		// ******************************
		// **** Get UMARF order List ****
		// ******************************
		// ClientUMARF.getOrderList();

		// **********************************
		// *** Get Web portal order List. ***
		// **********************************
		/*
		 * This result in running the script:
		 * /UMARF/safclient/bin/scripts/hsafWebGetOrderList.sh that gets the xml files
		 * from the web site reporting all the orders done. The script will generate the
		 * file "hsafWebOrders.xml" into the directory: /opt/hsaf/orders reporting the
		 * list of the orders.
		 */

		ClientHsafWebPortal.getOrderList();

		/* Parse UMARF orders file */
		// Orderlist UMARFHsafOrders = XmlOrderParser.parseXMLFile(ordersFilePath);

		/* Parse Web orders file */
		Orderlist webHsafOrders = XmlOrderParser.parseXMLFile(webOrdersFilePath);

		// check if the orders are valid (APNA check)
		ArrayList<Order> validWebHsafOrders = validateAPNA(webHsafOrders);

		ArrayList<Order> hsafOrdslist = new ArrayList<Order>();

		// hsafOrdslist.addAll(Arrays.asList(UMARFHsafOrders.getOrderArray()));
		hsafOrdslist.addAll(validWebHsafOrders);

		/* Start processing order */
		for (Order order : hsafOrdslist) {

			// Federating EOPortal Users and H-SAF Users
			User eoUser = order.getUser();
			String eoUsrMail = eoUser.getMail();

			/* Get the list of files in the order */
			ArrayList<String> orderedFiles = getOrderedFiles(order);

			/* Get Order ID */
			String selectedOrdID = order.getOrderID();

			/* Process order */
			processOrder(selectedOrdID, orderedFiles, eoUsrMail);

			// Web orders are numbered starting from 50000
			// Eumetsat orders start from 1 to 49999
			if (Integer.parseInt(selectedOrdID) >= 50000) {

				logger.info("Acknowledging order: " + selectedOrdID);
				// WEB ORDER MANAGEMENT
				ClientHsafWebPortal.acknowledgeOrder(selectedOrdID);

			} else {

				// EUMETSAT ORDER MANAGEMENT
				// Acknowledge to UMARF server
				// ClientUMARF.acknowledgeOrder(selectedOrdID);
			}

			String processed = "H-SAF Order Request \n\n" + "Order ID: " + selectedOrdID + "\n" + "Name: "
					+ eoUser.getFirstName() + "\n" + "Surname: " + eoUser.getLastName() + "\n" + "Email: "
					+ eoUser.getMail() + "\n" + "Has been acknowledged and process started\n\n";

			// Notify only administrator (COMMON_RECIPIENT in the configuration file) about
			// the order processing by e-mail

			logger.info(processed.toString());
			emailServer.sendmailHsaf((String) processed, "");

		}

		logger.info(new Date() + " Orders processing ends");
		
		logger.info(new Date() + " Collecting orders data ");
		ClientHsafWebPortal.collectOrdersData();

	}

	private static ArrayList<Order> validateAPNA(Orderlist webHsafOrders) {

		logger.info(new Date() + " Validate Orders");

		ArrayList<Order> validOrders = new ArrayList<Order>();

		List<Order> orders = webHsafOrders.getOrder();

		boolean isNotValid;

		if (!orders.isEmpty()) {
			Iterator<Order> orderIter = orders.iterator();

			while (orderIter.hasNext()) {

				isNotValid = false;
				Order order = orderIter.next();
				List<PFDUnit> pfdUnits = order.getPFDUnit();

				logger.info(new Date() + " Processing order: " + order.getId());

				// check all the APNA in the order.
				// IF the order contains not valid APNA --> skip the order
				// ELSE add the order to the list of valid order and go to the next
				for (PFDUnit unit : pfdUnits) {
					List<UMARFMetadataField> fields = unit.getAdditionalInfo().getField();
					for (UMARFMetadataField field : fields) {

						if (field.getFieldName().matches("APNA")) {

							if (!ListOfOrderableProducts.products.contains(field.getValue().split("_")[0])) {

								logger.info(new Date() + "APNA not valid (Product Not in the list of orderable products): " + field.getFieldName() + "----"
										+ field.getValue().split("_")[0]);
								isNotValid = true;
							}
						}
					}
				}

				// IF not valid skip the order
				if (isNotValid) {

					String msg = "Order " + order.getId()
							+ " has been skipped because it contains not orderable products";
					logger.info(msg);
					emailServer.sendmailHsaf(msg, "gabriele.gottardo@telespazio.com");

				} else {

					validOrders.add(order);
				}
			}
		}

		logger.info(new Date() + " Found " + validOrders.size() + " valid Orders");

		return validOrders;
	}

	private static void processOrder(String orderID, ArrayList<String> files, String eoUsrMail) throws IOException {

		// Storing history information for product
		String orderFile = ORDERS_DIR_PATH + File.separator + "hsaforder_" + orderID + ".web";

		BufferedWriter out = null;

		logger.info("Start processing order" + orderID);

		try {

			out = new BufferedWriter(new FileWriter(orderFile, false));
			out.write(eoUsrMail);
			out.newLine();

			for (int i = 0; i < files.size(); i = i + 2) {

				String line = files.get(i) + "," + files.get(i + 1);
				out.write(line);
				out.newLine();
			}

		} catch (Exception e) {
			String msg = "ERROR processing order ID <" + orderID + ">: I/O Exeception on " + orderFile + ": " + e;
			logger.info(msg);
			AutomaticOrderManager.emailServer.sendmailFailureToAdmin(msg);

		} finally {

			if (out != null) {
				out.flush();
				out.close();
			}
		}

		logger.info("Finish processing order" + orderID);
	}

	private static ArrayList<String> getOrderedFiles(Order order) {

		PFDUnit[] crPfdList = order.getPFDUnit().toArray(new PFDUnit[0]);
		int pfdSize = crPfdList.length;
		// fileNumberLbl.setValue("Ordered files number: " + Integer.toString(pfdSize));
		// Files ArrayList
		ArrayList<String> orderedFiles = new ArrayList<String>();

		for (int k = 0; k < pfdSize; k++) {

			PFDUnit pfd = crPfdList[k];
			AdditionalInfo info = pfd.getAdditionalInfo();
			UMARFMetadataField[] fields = info.getField().toArray(new UMARFMetadataField[0]);
			int nrFields = fields.length;
			String apnaValue = "";

			for (int j = 0; j < nrFields; j++) {

				UMARFMetadataField field = fields[j];
				String fName = field.getFieldName();

				if (fName.equals("APNA")) {

					apnaValue = field.getValue();
					orderedFiles.add(apnaValue);
				}
			}
		}
		return orderedFiles;
	}
}
